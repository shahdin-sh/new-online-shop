"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""


import environs
import os
from allauth.account.apps import AccountConfig
from environs import Env
from pathlib import Path

# for environments variables
env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DJANGO_DEBUG")

ALLOWED_HOSTS = [
    '127.0.0.1',
    'local host'
]
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    # third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    "debug_toolbar",
    "ckeditor",
    "rosetta",
    # local apps
    'accounts',
    'crispy_forms',
    'products.apps.ProductConfig',
    'cart.apps.CartConfig',
    'orders.apps.OrdersConfig',
    'paymant.apps.PaymantConfig',
    'blog',
    'jalali_date',
    # Rest Framework
    'rest_framework',
]
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # thrid party apps
    'allauth.account.auth_backends.AuthenticationBackend',
]

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # third parties middlewares
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR.joinpath('templates'))],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Custom Context Processors
                'cart.context_processors.shopping_cart',
                'orders.context_processors.order_items',
                'blog.context_processors.blog_posts',
                'context_processors.admin_panel_language',
            ],
        },
    },
]


WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
   'default': {
       'ENGINE': 'django.db.backends.postgresql',
       'NAME': env("DB_NAME"),
       'USER': env("DB_USER"),
       'PASSWORD': env("DB_PASSWORD"),
       'HOST': env("DB_HOST"),
       'PORT': env("DB_PORT"),
   }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'fa'
TIME_ZONE = 'Asia/Tehran'
USE_I18N = True
USE_L10N = True
USE_TZ = True

LANGUAGES = [
    ('en', 'English'),
    ('fa', 'Farsi')
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "products/locale"),
    os.path.join(BASE_DIR, "templates/locale"),
    os.path.join(BASE_DIR, "accounts/locale"),
    os.path.join(BASE_DIR, "blog/locale"),
    os.path.join(BASE_DIR, "cart/locale"),
    os.path.join(BASE_DIR, "orders/locale"),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
# collectstatic. Collects the static files into STATIC_ROOT.
# Duplicate file names are by default resolved in a similar way to how template resolution works: 
# the file that is first found in one of the specified locations will be used.
# If you're confused, the findstatic command can help show you which files are found.

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# accounts config
AUTH_USER_MODEL = 'accounts.CustomUserModel'
LOGIN_REDIRECT_URL = 'pages:homepage'
LOGOUT_REDIRECT_URL = 'pages:homepage'


# allauth config, set additional config later.
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = ("email")
ACCOUNT_SESSION_REMEMBER = None
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 4
# custom config for allauth
FIRST_NAME_MIN_LENGHT = 30
LAST_NAME_MIN_LENGHT = 30
ACCOUNT_FORMS = {
    'login': 'accounts.forms.CustomLoginForm',
    'signup': 'accounts.forms.CustomSignupForm',
    'add_email': 'allauth.account.forms.AddEmailForm',
    'change_password': 'allauth.account.forms.ChangePasswordForm',
    'set_password': 'allauth.account.forms.SetPasswordForm',
    'reset_password': 'allauth.account.forms.ResetPasswordForm',
    'reset_password_from_key': 'allauth.account.forms.ResetPasswordKeyForm',
    'disconnect': 'allauth.socialaccount.forms.DisconnectForm',
}


# media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


#static files config
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)


# crispy forms
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Zarinpal configuration
ZARINPAL_MERCHANT_ID = env('DJANG0_ZARINPAL_MERCHANT_ID')

# Message Framework configs

from django.contrib.messages import constants as messages_consts

MESSAGE_TAGS = {
    messages_consts.ERROR: 'danger',
} 